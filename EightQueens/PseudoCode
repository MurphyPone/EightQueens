Queen() {
	int r, c
	Queen(int row, int col) { r = row; c = col; }
	
	get/set
}


Board.addQueens(LinkedList<Queen> QP) {
	if QP.length == NUM_QUEENS 
		for Queen q : QP 
			b[q.r][q.c] = "Q"; //copy the solution to the board
		return true & display solution
	else 
		for(row)
			//check if you can place a queen in each of the columns
			//if so, then return true
			//if not false
			//call this method 8 times from each row 
			
}



isValid(List QP, int r, c) {
	for Queen q : qp 
		if q.r == r
			return false //rows
		if q.c == c
			return false //cols
		if m //Calculate the major diagonal?
}

boolean isDV(int r, int c) {
	int offset = 0;
	while(r <= NQ && c <= NQ) 
		if isQueen(r+offset, c+offset)
			return false 
		offset++
}

//ACTUAL CODE ///

//Logical Methods //Should hash every position 
	private boolean isRowClear(int r, int c, int dirFrom) {
		//Base Cases
		if( isOutOfBounds(r, c) ) { return true; } //Reached end of board
		if( isQueen(r, c) ) { return false; } //conflicting Queen
		//Recurse
		if(dirFrom == -1 ) { return isRowClear(r-1, c, -1 ); } //search left
		if(dirFrom == 1) { return isRowClear(r+1, c, 1); } //search right 
		
		return isRowClear(r-1, c, -1) && isRowClear(r+1, c, 1 ); //one call to the left and one call to the right
	}
	
	private boolean isColClear(int r, int c, int dirFrom) {
		//Base Cases
		if( isOutOfBounds(r, c) ) { return true; } //Reached end of board
		if( isQueen(r, c) ) { return false; } //conflicting Queen
		//Recurse
		if(dirFrom == -1 ) { return isColClear(r, c-1, -1 ); } //search left
		if(dirFrom == 1) { return isColClear(r, c+1, 1); } //search right 
		//If not left or right, call both
		return isColClear(r, c-1, -1) && isColClear(r, c+1, 1 ); //one call to the left and one call to the right
	}
	
	private boolean isDiagonalClear(int r, int c, int dirFrom) { //top-left, top-right, bottom-left, bottom-right : 1 2 3 4 -- 0 = all
		//Base cases
		if( isOutOfBounds(r, c) ) { return true; } //Reached end of board
		if( isQueen(r, c) ) { return false; } //conflict
		//Recurse
		if(dirFrom == 1) { return isDiagonalClear(r-1, c-1, 1); }	//top left
		if(dirFrom == 2) { return isDiagonalClear(r+1, c-1, 2); }	//top right
		if(dirFrom == 3) { return isDiagonalClear(r-1, c+1, 3); }	//bottom left
		if(dirFrom == 4) { return isDiagonalClear(r+1, c+1, 4); }	//bottom right
		//if 0, then call all with respective dir
		return  isDiagonalClear(r-1, c-1, 1) && isDiagonalClear(r+1, c-1, 2) 
				&& isDiagonalClear(r-1, c+1, 3) &&isDiagonalClear(r+1, c+1, 4);
	}
	
	//













PSEUDO CODE 

Queen Class
	final static NUM_QUEENS = 8;
	String[NUM_QUEENS][NUM_QUEENS] board --to store all the queens as either a "" or a "Q"
	int placeQueens; //Keep track of how many queens have been placed so far 
	
	//Logic//
	
	//Recursive checks which may be helpful for brute force?
	boolean isRowClear(int r, int c) {
		if(board[r][c] == "Q")	//Is a queen = invalid placement
			return false
		else if(board[r][[c] == null ) //reached end of the board = valid placement
			return true
		else if(board[r][c] == " " ) 
			return isRowClear(r-1, c) && isRowClear(r+1, c) 	//Is a blank spot == check left and right spaces
	}
	
	boolean isColClear(int r, int c) {
		if(board[r][c] == "Q")	//Is a queen = invalid placement
			return false
		else if(board[r][[c] == null ) //reached end of the board = valid placement
			return true
		else if(board[r][c] == " " ) 
			return isRowClear(r, c-1) && isRowClear(r, c+1) 	//Is a blank spot == check left and right spaces
	}
	
	boolean isDiagonalClear(int r, int c) {
		if(board[r][c] == "Q")	//Is a queen = invalid placement
			return false
		else if(board[r][[c] == null ) //reached end of the board = valid placement
			return true
		else if(board[r][c] == " " ) 
			return isDiagonalClear(r+1, c+1) && isDiagonalClear(r-1, c-1) //Down right and up left
				&& isDiagonalClear(r+1, c-1) && isDiagonalClear(r-1, c+1) //up Right and down left 
	}
	
	boolean isClear(int r, int c) {
		return isRowClear() && isColClear(r, c) && isDiagonalClear(r, c);
	}
	
	boolean isSolution() {
		return (placedQueens == 8);
	}
	
	//USE MATH TO CALC THE MAJ AND MIN DIAGONALS
	
	void place() {	//Can't be this easy...
		for(int r = 0; r < NUM_QUEENS; i++) {
			for(int c = 0; c < NUM_QUEENS; i++) {
				if( isClear(r, c) ) 
					board[r][c] == "Q";
			}
		}
		if(isSolution())
			//Write the solution to an output... How to make the program generate more than 1 solution...
	}
	
	//Graphics//
	draw() {
		for each row 
			for each column		
				if(board[r][c] == "Q")
					//Draw a Queen img 
				else 
					//just draw the square (code won't actually be implemented here, but in the Panel?
	}	
}


class ChessSquarePanel extends JPanel {
	public static img = new Image("Queen.png")//Have a single queen image
	int numSquare; //Keeps track of which square you're at to determine its color
	
	
	ChessSquarePanel(Color bg, boolean isEmpty) {
		if(!isEmpty) { paintcomponent.draw(img)}
	}
	
	public void pantComponenet(Graphics g, int numSquare) {
		super.paintComponent(g);	//super
		int w = getWidth();	//grab dimensions of self panel
		int h = getHeight();
		if(numSquares % 2 == 0)	//set it's color acc to 
			g.setColor(~lightbrown~)	//SET BACKGROUND COLOR TO everyother 
		else 
			g.setColor(~darkbrown~);
			
		g.drawRect(getX, getY, w, h);
		
		//This is the grid layout thing, but where does is it go
		Container c = getContentPane();
		c.setLayout(new GridLayout(2, 2, 1, 1) );
		
	}
	
	public static main(String[] args) {
		JFrame window = new JFrame("Drawings");
		//window.setBounds(800, 600)
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
		JPanel canvas = new CLASS ChessSquarePanel();
		canvas.setBackground(Color.white)
		window.getContentPanel().add(canvas)
		window.setVisible(true)
	}
	
}


